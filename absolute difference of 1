/*
Given an array A of size N. Print all the numbers less than K in the array. The numbers should be such that the difference between every
adjacent digit should be 1.

Note: Print '-1' if no number if valid.

Input:
The first line consists of an integer T i.e number of test cases. T testcases follow. Each testcase contains two lines of input. The first
line consists of two integers N and K separated by a space. The next line consists of N spaced integers. 

Output:
For each testcase, print the required output.

Constraints: 
1 <= T <= 100
1 <= N <= 107
1 <= K, A[i] <= 1018

Example:
Input:
2
8 54
7 98 56 43 45 23 12 8
10 1000
87 89 45 235 465 765 123 987 499 655

Output:
43 45 23 12
87 89 45 765 123 987

Explanation:
Testcase1: 43 45 23 12  all these numbers have adjacent digits diff as 1 and they are less than 54
*/

#include <bits/stdc++.h>
using namespace std;

bool digit(long long n)
{
    vector<int> a;
    while(n!=0)
    {
       a.push_back(n%10);
       n/=10;
    }
if(a.size()==1) return false;
    for(int i=0;i<a.size()-1;i++)
    {
        if(abs(a[i]-a[i+1]) != 1) return false;
    }    
return true;
}



int main() {
	int t; cin>>t; while(t--)
	{
	    long long n,k; cin>>n>>k;
	    long long a[n],flag=0;
	    for(int i=0;i<n;i++) cin>>a[i];
	    for(int i=0;i<n;i++){
	        if(a[i]<k && (digit(a[i])==true)) {flag=1; cout<<a[i]<<" "; }
	    }
	    if(flag==0) cout<<-1;
	   cout<<endl;
	}
	return 0;
}
