/*
Given two n-ary tree's the task is to check if they are mirror of each other or not.

Example

     1                    1
   /    \                 /   \
 2      3             3     2

Output: 1

    1                      1
   /  \                    /  \
 2    3                2    3

Output: 0

Note: you may assume that root of both the given tree as 1.

Input:
The first line of input contains an integer T denoting the no of test cases. Then T test cases follow. The first line of each test case
contains two space separated values n and e denoting the no of nodes and edges respectively. Then in the next line two lines are 2*e 
space separated values u,v denoting an edge from u to v for the both trees .

Output:
For each test case in a new line print 1 if both the trees are mirrors of each other else print 0.

Constraints:
1<=T<=20
1<=n<=15
1<=e<=20

Example:
Input:
2
3 2
1 2 1 3
1 3 1 2
3 2
1 2 1 3
1 2 1 3
Output:
1
0
*/

#include <bits/stdc++.h>
using namespace std;

bool mirror(vector<int> v[] , vector<int> v1[] , int n){

    for(int i=0; i<n; i++)
       reverse(v[i].begin(), v[i].end());
    for(int i=0; i<n; i++){
        if(v[i]!=v1[i])
          return false;
    }
return true;
}
//)Make adjacency list of graph1
//2)Make adj list of graph 2
//3)reverse adjancency list of graph 2
//4)compare both the adjancecy list

int main(){
    int t; cin>>t; while(t--){
        int n,e,a,b; cin>>n>>e;
        vector<int> v[100] ,v1[100];
        for(int i=0; i<e; i++)
        {
            cin>>a>>b;
            v[a].push_back(b);
        }
        for(int i=0; i<e; i++)
        {
            cin>>a>>b;
            v1[a].push_back(b);
        }
        cout<<mirror(v,v1,n)<<'\n';
    }
}
