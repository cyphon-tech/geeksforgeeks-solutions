/*
Given a Binary Tree of size N, your task is to complete the function deletionBT(), that should delete a given node from the tree by making
sure that tree shrinks from the bottom (the deleted not is replaced by bottommost and rightmost node).
Example:

Eample Deletion in Bt
Input:
The function takes two arguments as input, the reference pointer to the root of the binary tree and an integer Key that needed to be
deleted from the tree.
There are T test cases and for each test case the function will be called separately.

Output:
For each test output will be the inorder traversal of the new tree.

Constraints:
1<=T<=100
1<=N<=103

Example:
Input:
2
7
10 20 L 20 30 L 30 40 L 30 50 R 40 60 L 60 70 R 70 80 L
40
6
1 2 L 1 3 R 2 4 L 2 5 R 3 6 L 3 7 R
6
Output:
60 70 80 30 50 20 10 
4 2 5 1 7 3 
*/

void deleteDeepest(Node *root, Node *temp){
    queue<Node*> q; q.push(root);
    while(!q.empty()){
        Node *t = q.front(); q.pop();
        if(t==temp){
            t=NULL;
            delete(temp);
            return;
        }
        if(t->right){
            if(t->right == temp)
             {
                 t->right=NULL;
                 delete(temp);
                 return;
             }
             else q.push(t->right);
        }
        if(t->left){
            if(t->left == temp)
             {
                 t->left=NULL;
                 delete(temp);
                 return;
             }
             else q.push(t->left);
        }
    }
}


void deletionBT(struct Node* root, int key)
{
    if(root == NULL) return;
    if(root->left ==NULL && root->right==NULL){
       if(root->key == key)
           {
             root=NULL;
             return;
           }
        else return;
    }
    queue<Node *> q;
    Node *key_node=NULL ,*t;
    q.push(root);
    while(!q.empty()){
        t=q.front(); q.pop();
        if(t->key == key )
             key_node=t;
        if(t->left) q.push(t->left);
        if(t->right) q.push(t->right);
    }
    if(key_node!=NULL){
        int x=t->key;
        deleteDeepest(root,t);
        key_node->key = x;
    }
}
