/*
Two of the nodes of a Binary Search Tree (BST) are swapped. Fix (or correct) the BST.

Input Format:
First line consists of T test cases. First line of every test case consists of N, denoting number of elements in BST. Second line of every
test case consists 3*N elements 2 integers and a character

Note: It is guaranteed than the given input will form BST ,except for 2 nodes that will be wrong.

Output Format:
For each testcase, in a new line, print either 0 or 1.

Your Task:
You don't need to take any input. Just complete the function correctBst() that takes node as parameter. The corrected BST will then be
checked internally.

Constraints:
1 <= T <= 100
1 <= N <= 100

Example:
Input:
2
4
10 5 L 10 8 R  5 2 L 5 20 R
5
8 3 L 8 10 R 3 1 L 3 6 R 6 7 R

Output:
1
0


*/

void correctBSTUtil( struct Node* root, struct Node** first, 
                     struct Node** middle, struct Node** last, 
                     struct Node** prev ) 
{ 
    if( root ) 
    { 
        correctBSTUtil( root->left, first, middle, last, prev ); 
        if (*prev && root->data < (*prev)->data) 
        { 
            if ( !*first ) 
            { 
                *first = *prev; 
                *middle = root; 
            } 
            else
                *last = root; 
        } 
        *prev = root; 
        correctBSTUtil( root->right, first, middle, last, prev ); 
    } 
} 

struct Node *correctBST( struct Node* root )
{
   struct Node *first, *last, *prev, *middle;
   first=last=prev=middle=NULL;
   
   correctBSTUtil( root, &first, &middle, &last, &prev ); 
   
   if( first && last ) 
        swap( &(first->data), &(last->data) ); 
    else if( first && middle )  
        swap( &(first->data), &(middle->data) );
return root;
}

