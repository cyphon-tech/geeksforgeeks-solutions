/*
Given two Singly Linked List of N and M nodes respectively. The task is to check whether two linked lists are identical or not. 
Two Linked Lists are identical when they have same data and with same arrangement too.

Input:
First line of input contains number of testcases T. For each testcase, first line of input contains length of linked lists N and M and next
line contains elements of the linked lists.

Output:
For each test the output will be 'Identical' if two list are identical else 'Not identical'.

User Task:
The task is to complete the function areIdentical() which takes head of both linked lists as arguments and returns True or False.

Constraints:
1 <= T <= 100
1 <= N <= 103

Example:
Input:
2
6
1 2 3 4 5 6
4
99 59 42 20
5
1 2 3 4 5
5
1 2 3 4 5

Output:
Not identical
Identical

Explanation:
Testcase 1: Each element of first linked list is not equal to each elements of second linked list in the same order.
Testcase 2: Each element of first linked list is equal to each elements of second linked list in the same order.
*/

bool areIdentical(struct Node *head1, struct Node *head2)
{
 
   struct Node *t=head1, *t1=head2;
   while(t && t1){
       if(t->data!=t1->data) return false;
       else {
           t=t->next;
           t1=t1->next;
       }
   }
 if(t1==NULL && t==NULL) return true;
 else return false;
}
