/*
Given an array of N positive integers, print k largest elements from the array.  The output elements should be printed in decreasing order.

Input:
The first line of input contains an integer T denoting the number of test cases. The first line of each test case is N and k, N is the size of 
array and K is the largest elements to be returned. The second line of each test case contains N input C[i].

Output:
Print the k largest element in descending order.

Constraints:
1 ≤ T ≤ 100
1 ≤ N ≤ 100
K ≤ N
1 ≤ C[i] ≤ 1000

Example:
Input:
2
5 2
12 5 787 1 23
7 3
1 23 12 9 30 2 50

Output:
787 23
50 30 23

Explanation:
Testcase 1: 1st largest element in the array is 787 and second largest is 23.
Testcase 2: 3 Largest element in the array are 50, 30 and 23.
*/

#include <bits/stdc++.h>
using namespace std;

void heapify(int a[], int n, int i)  {
      int largest = i;
      int l= 2*i+1;
      int r= 2*i+2;
      if(l<n && a[l]>a[largest])
        largest=l;
      if(r<n && a[r]>a[largest])
        largest=r;
     if(largest!=i){
         swap(a[i] , a[largest]);
         heapify(a,n,largest);
     }
}
// Rearranges input array so that it becomes a max heap
void buildHeap(int a[], int n, int k)  { 
    for(int i=n/2-1; i>=0; i--){
        heapify(a,n,i);
    }
    for(int i=n-1; i>=0; i--){
        swap(a[0], a[i]);
        heapify(a,i,0);
    }
     for(int i=n-1; i>=n-k; i--){
       cout<<a[i]<<" ";
    }
    cout<<endl;
}


int main() {
	int t; cin>>t; while(t--){
	    int n,k; cin>>n>>k;
	    int a[n]; for(int i=0; i<n; i++) cin>>a[i];
	    buildHeap(a,n,k);
	    
	    
	}
	return 0;
}
 
