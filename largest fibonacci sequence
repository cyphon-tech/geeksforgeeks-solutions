/*
Given an array with positive number the task to find the largest subsequence from array that contain elements which are Fibonacci numbers.

Input:
The first line of input contains an integer T denoting the no of test cases. Then T test cases follow. Each test case contains an integer 
N denoting the size of the array. Then in the next line are N space separated values of the array.

Output:
For each test case in a new line print the space separated elements of the  longest fibonacci subsequence.

Constraints:
1<=T<=100
1<=N<=100
1<=A[]<=1000

Example:
Input:
2
7
1 4 3 9 10 13 7
9
0 2 8 5 2 1 4 13 23

Output:
1 3 13
0 2 8 5 2 1 13 
*/


#include <bits/stdc++.h>
using namespace std;

bool isPerfectSquare(int n){
    if(floor(sqrt(n)) == ceil(sqrt(n))) return true;
    else return false;
}

bool isFib(int n){
    if(isPerfectSquare(5*n*n + 4) || isPerfectSquare(5*n*n -4)) return true;
    else return false;
}

int main() {
	int t; cin>>t; while(t--){
	    int n; cin>>n;
	    int a[n]; for(int i=0; i<n; i++) cin>>a[i];
	    for(int i=0; i<n; i++){
	        if(isFib(a[i]))
	          cout<<a[i]<<" ";
	    }
	    cout<<'\n';
	}
	return 0;
}
