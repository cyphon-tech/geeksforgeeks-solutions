/*
Given an array consisting of N positive integers, and an integer k .You have to find the maximum product of k contiguous elements in the 
array. Your task is to complete the function which takes three arguments .The first argument  is the array A[ ] and second argument is an 
integer N denoting the size of the array A[ ] and the third argument  is an integer k.The function will return and value denoting the 
largest product of sub-array of size k.

Input:
The first line of input is an integer T denoting the no of test cases. Then T test casesfollow . The first line of each test case are two 
integer N and K separated by space .The next line contains N space separated values of the array A[ ].

Output:
Output of each test case will be an integer denoting the largest product of subarray of size k.

Constraints:
1 <=T<= 100
1 <=N<= 10
1 <=K<= N
1<=A[]<=10

Example:
Input
1
4 2
1 2 3 4
Output
12 

Explanation:
The sub-array of size 2 will be 3 4 and the product is 12.


Note:The Input/Ouput format and Example given are used for system's internal purpose, and should be used by a user for Expected Output
only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function 
specified, and not to write the full code.
*/

long int max(long int a, long int b){
    return (a>b)? a:b;
}
//max prod of subarray of size k
long int findMaxProduct(int arr[], int n, int k) 
{ 
    long int MaxProduct = 1; 
    for (int i=0; i<k; i++) 
        MaxProduct *= arr[i]; 
    long int prev_product = MaxProduct; 
    for (int i=1; i<=n-k; i++) 
    { 
        long int curr_product = (prev_product/arr[i-1]) * 
                            arr[i+k-1]; 
        MaxProduct = max(MaxProduct, curr_product); 
        prev_product = curr_product; 
    } 
    return MaxProduct; 
} 
