/*
Given an array and a number k, find the largest sum of the subarray containing at least k numbers. It may be assumed that the size of 
array is at-least k.

Input:â€‹
The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case contains an
integer n denoting the size of the array. Then the following line contains n space separated integers. The last line of the input contains
the number k.

Output:
Print the value of the largest sum of the subarray containing at least k numbers.

Constraints:
1<=T<=10^5
1<=n<=10^5
1<=a[i]<=10^5
1<=k<=n

Example:
Input:
2
4
-4 -2 1 -3
2
6
1 1 1 1 1 1
2

Output:
-1
6
*/
#include<iostream>
#include<climits>
using namespace std;
int Helper(int ar[],int n,int k){
    if(n==1) return ar[0];
    int cur_sum=0,ans=INT_MIN,best_ps=INT_MAX,cur_ps=0;
    for(int i=0;i<k;i++) cur_sum+=ar[i];
    ans=max(ans,cur_sum);
    for(int i=k;i<n;i++){
        cur_sum+=ar[i];
        ans=max(ans,cur_sum);
        cur_ps+=ar[i-k];
        best_ps=min(best_ps,cur_ps);
        ans=max(ans,cur_sum-best_ps);
    }
    return ans;
}
int main()
 {
	//code
	int t;
	cin>>t;
	while(t--){
	    int n,k;
	    cin>>n;
	    int ar[n];
	    for(int i=0;i<n;i++) cin>>ar[i];
	    cin>>k;
	    cout<<Helper(ar,n,k)<<endl;
	}
	return 0;
}
