/*
Complete the function to print spiral order traversal of a tree. For below tree, function should print 1, 2, 3, 4, 5, 6, 7.


 
 

Input Format:
The task is to complete the method which takes one argument, root of the Tree. The struct node has a data part which stores the data,
pointer to left child and pointer to right child.
There are multiple test cases. For each test case, this method will be called individually.

Output Format:
The function should print level order traversal in spiral form .

User Task:
The task is to complete the function printSpiral() which prints the elements in spiral form of level order traversal. The newline is 
automatically appended by the driver code.

Constraints:
1 <= T <= 100
1 <= Number of nodes <= 3000
1 <= Data of a node <= 1000

Example:
Input:
2
2
1 2 R 1 3 L
4
10 20 L 10 30 R 20 40 L 20 60 R

Output:
1 3 2
10 20 30 60 40

Explanation:
Testcase1: The tree is
        1
     /      \
   3       2
So, the spiral level order would be 1 3 2
Testcase2: The tree is
                           10
                        /        \
                     20         30
                  /       \
               40       60
So, the spiral level order would be 10 20 30 60 40

*/


void printSpiral(Node *root)
{
     int h=0;
	 queue<Node *> q;
	 q.push(root);
	 stack<int> s;
	 while(!q.empty()){
	     int size = q.size();
	     while(size--){
	         Node *t = q.front();
	         q.pop();
	         if(h%2 != 0 && h!=0){
	             cout<<t->data<<" ";
	         }
	         else{
	             s.push(t->data);
	         }
	         if(t->left) q.push(t->left);
	         if(t->right) q.push(t->right);
	     }
	     while(!s.empty()){
	         cout<<s.top()<<" ";
	         s.pop();
	     }
	     h++;
	 }
	 //cout<<'\n';
}                                                                                
