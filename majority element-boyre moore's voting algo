/*
Given an array A of N elements. Find the majority element in the array. A majority element in an array A of size N is an element that 
appears more than N/2 times in the array.

Input:  
The first line of the input contains T denoting the number of testcases. The first line of the test case will be the size of array and
second line will be the elements of the array.

Output: 
For each test case the output will be the majority element of the array. Output "-1" if no majority element is there in the array.

Constraints:
1 <= T<= 100
1 <= N <= 107
0 <= Ai <= 106

Example:
Input:
2
5
3 1 3 3 2
3
1 2 3

Output:
3
-1

Explanation:
Testcase 1: Since, 3 is present more than N/2 times, so it is the majority element.
*/

#include <bits/stdc++.h>
using namespace std;

//solving by using boyre moore's voting algorithm; find element that has repeated more than n/2 times

int findCand(int a[], int n){
    int maj_indx=0, c=1;
    for(int i=1; i<n; i++){
        if(a[maj_indx] == a[i])
         c++;
        else c--;
        if(c==0){
            maj_indx=i;
            c=1;
        }
    }
return a[maj_indx];
}

bool isMaj(int a[], int n, int cand){
    int c=0;
    for(int i=0; i<n; i++){
        if(a[i] == cand) c++;
    }
    return (c>n/2)? true: false;
}




int main() {
	int t; 
	cin>>t;
	while(t--){
	    int n; cin>>n;
	    int a[n]; for(int i=0; i<n; i++) cin>>a[i];
	    int cand = findCand(a,n);
	    if(isMaj(a,n,cand)) cout<<cand;
	    else cout<<-1;
	    cout<<'\n';
	}
	
	return 0;
}
 
