/*
Given a Binary Tree, find maximum and minimum elements in it.

Input:
The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case contains an
integer n denoting the number of edges. The following line contains the edges as shown in the example.

Output:
Print two space-separated integers maximum and minimum element in the binary tree.

Constraints:
1<=T<=10^5
1<=n<=10^5
1<=data of the node<=10^5

Example:
Input:
1
7
2 7 L 2 5 R 7 6 R 6 1 L 6 11 R 5 9 R 9 4 L

Output:
11 1

Explanation:

                                                       

The above tree is constructed through the example in the input. The maximum and minimum element in this binary tree is 11 and 1 
respectively.
*/

int findMax(struct node* root)
{
  // if(root==NULL) return 0;
   int romax, lmax, rmax,ans=INT_MIN;
   if(root!=NULL){
       romax = root->data;
       lmax = findMax(root->left);
       rmax = findMax(root->right);
       
       if(lmax > rmax)
           ans=lmax;
       else ans=rmax;
       if(romax > ans)
          ans=romax;
   }
 return ans;
  
}
// Returns minimum value in a given Binary Tree
int findMin(struct node* root)
{
 //if(root==NULL) return 0;
   int romax, lmax, rmax,ans=INT_MAX;
   if(root!=NULL){
       romax = root->data;
       lmax = findMin(root->left);
       rmax = findMin(root->right);
       
       if(lmax < rmax)
           ans=lmax;
       else ans=rmax;
       if(romax < ans)
          ans=romax;
   }
 return ans;
}
