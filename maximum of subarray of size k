/*
Given an array A and an integer K. Find the maximum for each and every contiguous subarray of size K.

Input:
The first line of input contains an integer T denoting the number of test cases. The first line of each test case contains a single
integer N denoting the size of array and the size of subarray K. The second line contains N space-separated integers A1, A2, ..., AN
denoting the elements of the array.

Output:
Print the maximum for every subarray of size k.

Constraints:
1 ≤ T ≤ 200
1 ≤ N ≤ 107
1 ≤ K ≤ N
0 ≤ A[i] <= 107

Example:
Input:
2
9 3
1 2 3 1 4 5 2 3 6
10 4
8 5 10 7 9 4 15 12 90 13

Output:
3 3 4 5 5 5 6
10 10 10 15 15 90 90

Explanation:
Testcase 1: Starting from first subarray of size k = 3, we have 3 as maximum. Moving the window forward, maximum element are as 3, 4, 5, 5.
5 and 6.
*/

#include <bits/stdc++.h>
#define f for(int i=0; i<n; i++)
using namespace std;

void maxSubArrays(int a[], int n, int k){
    deque<int> q;
    int i;
    for(i=0; i<k; i++){
        while((!q.empty()) && a[i]>=a[q.back()])
           q.pop_back();
        q.push_back(i);
    }
    for(i=k; i<n; i++){
        cout<<a[q.front()]<<" ";
        while((!q.empty()) && q.front()<=i-k)
            q.pop_front();
        while((!q.empty()) && a[i]>=a[q.back()])
             q.pop_back();
        q.push_back(i);
    }
    if(!q.empty()) cout<<a[q.front()];
}



int main() {
	 int t; cin>>t; while(t--){
	     int n,k; cin>>n>>k;
	     int a[n]; f cin>>a[i];
	     maxSubArrays(a,n,k);
	     cout<<'\n';
	 }
	return 0;
}
