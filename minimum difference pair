/*
Given an unsorted array, find the minimum difference between any pair in given array.

Input:

The first line of input contains an integer T denoting the number of test cases.
The first line of each test case is N, the size of array. Second line of the test case is the Array.

Output:

Print the minimum difference between any two pairs.

Constraints:

1 <= T <= 30
1 < N <= 100
1 <= arr[i] <= 100000

Example:
Input:
2
5
2 4 5 7 9
10
87 32 99 75 56 43 21 10 68 49

Output:
1
6
*/

#include <iostream>
#include <algorithm>
#include <unordered_map>
using namespace std;

bool sim(int a[], int n)
{
    unordered_map<int , int> freq;
    for (int i=0; i<n; i++) 
        freq[a[i]]++; 
    unordered_map<int, int>:: iterator itr; 
    for (itr=freq.begin(); itr!=freq.end(); itr++) 
    {
        if (itr->second > 1) 
        { 
           return true;
        } 
    } 
  
return false;
}

int main() {
	int t; cin>>t; while(t--)
	{
	    int n; cin>>n;
	    int a[n];
	    for(int i=0;i<n;i++) cin>>a[i];
	    if(sim(a,n)) cout<<0<<endl;
	    else
	    {
	    sort(a,a+n);
	    int diff=1000000;
 
	     for(int i=0;i<n-1;i++)
	      if(a[i+1]-a[i]<diff)
	        diff=a[i+1]-a[i];
	    cout<<diff<<endl;
	    }
	}
	return 0;
}
