/*
Given a binary tree, print postorder traversal of it. Postorder traversal of below tree is 5 10 39 1

        1
     /     \
   10     39
  /
5

Input Format:
The first line of input contains T denoting the number of testcases. T testcases follow. Each testcase contains two lines of input. 
The first line contains number of edges. The second line contains the connections between the nodes.

Output Format:
For each testcase, in a new line, print the postorder traversal.

Your Task:
You don't need to take input. Just complete the function postorder() that takes node as parameter. The newline is automatically appended
by the driver code.

Constraints:
1 <= T <= 100
1 <= Number of nodes <= 100
1 <= Data of a node <= 1000

Example:
Input:
2
2
1 2 R 1 3 L
4
10 20 L 10 30 R 20 40 L 20 60 R

Output:
3 2 1
40 60 20 30 10

Explanation:
Testcase1: The tree is
        1
     /      \
   3       2
So, the postorder would be 3 2 1
Testcase2: The tree is
                           10
                        /        \
                     20         30
                  /       \
               40       60
So, the postorder would be 40 60 20 30 10.


*/


void postOrder(Node* root)
{
 stack<Node *> s;
 Node *prev=NULL;
 do{
     while(root!=NULL){
         s.push(root);
         root=root->left;
     }
     while(root==NULL && !s.empty()){
         root=s.top();
         if(root->right==NULL || root->right==prev){
             cout<<root->data<<" ";
             s.pop();
             prev=root;
             root=NULL;
         }
         else
          root=root->right;
     }
 }while(!s.empty());
}
