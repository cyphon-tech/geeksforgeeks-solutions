/*
Given an array arr[] which contains data of N nodes of Complete Binary tree in level order fashion. The task is to print the level order traversal in sorted order.

Input:
The first line of the input contains integer T denoting the number of test cases. For each test case, the first line takes an integer n denoting the size of array i.e number of nodes followed by n-space separated integers denoting the nodes of the tree in level order fashion.

Output:
For each test case, the output is the level order sorted tree.
Note:  For every level, we only print distinct elements.

Constraints:
1 <= T <= 100
1 <= n <= 104
1 <= arr[i] <= 104

Example:
Input:
2
7
7 6 5 4 3 2 1
6
5 6 4 9 2 1 
Output:
7
5 6
1 2 3 4
5
4 6
1 2 9

Explanation:
Testcase 1:
Tree looks like this   

            7
          /    \
        6       5
       / \     / \
      4  3    2   1
Sorted order:
7
5 6
1 2 3 4
       
      
      */
      
 #include <bits/stdc++.h>
using namespace std;

int main() {
	int t; cin>>t; while(t--){
	    int n; cin>>n;
	    int a[n]; for(int i=0; i<n; i++) cin>>a[i];
	    queue<int> q;
	    q.push(0);
	    vector<int> v;
	    //int i=0;
	    cout<<a[0];
	    while(!q.empty()){
	        int size = q.size();
	        while(size--){
	            int i = q.front();
	            q.pop();
	            if(2*i + 1 < n) {
	                q.push(2*i + 1);
	                 v.push_back(a[2*i + 1]);
	               }
	            if(2*i + 2 < n) {
	                q.push(2*i + 2);
	            v.push_back(a[2*i + 2]);
	            }
	        }
	        sort(v.begin(),v.end());
	        cout<<'\n';
	        for(int i=0; i<v.size(); i++)
	          cout<<v[i]<<" ";
	       // cout<<'\n';
	        v.clear();
	    }
	}
	return 0;
}
