/*
Given a string s, recursively remove adjacent duplicate characters from the string s. The output string should not have any adjacent
duplicates.
 

Input:
The first line of input contains an integer T, denoting the no of test cases. Then T test cases follow. Each test case contains a string 
str.

Output:
For each test case, print a new line containing the resulting string.

Constraints:
1<=T<=100
1<=Length of string<=50

Example:
Input:
2
geeksforgeek
acaaabbbacdddd

Output:
gksforgk
acac
*/

#include <bits/stdc++.h>
using namespace std;

void remove_dup(string &str)
{
	string temp;
	int i=0;
	while(i<str.size())
	{
		if(str[i]!=str[i+1])
		 temp.push_back(str[i]);
		else
		{
			//skip those many characters
			while(str[i]==str[i+1])
			 i++;
		}
		i++;
	}
	if(temp==str)
	 return;
	else
	{
		str=temp;
		remove_dup(str);
	}
}


    
int main() {
	int t; cin>>t; while(t--){
	   string str; cin>>str;
	   remove_dup(str);
	   cout<<str<<'\n';
	}
	return 0;
}
