/*
Given a sorted and rotated array A of N distinct elements which is rotated at some point, and given an element K. The task is to find 
the 
index of the given element K in the array A.

Input:
The first line of the input contains an integer T, denoting the total number of test cases. Then T test cases follow. Each test case 
consists of three lines. First line of each test case contains an integer N denoting the size of the given array. Second line of each 
test
case contains N space separated integers denoting the elements of the array A. Third line of each test case contains an integer K 
denoting the element to be searched in the array.

Output:
Corresponding to each test case, output the index of the element found in the array.  If element is not present, then output -1.

Constraints:
1 ≤ T ≤ 100
1 ≤ N ≤ 107
0 ≤ Ai ≤ 108
1 ≤ K ≤ 108

Example:
Input:
3
9
5 6 7 8 9 10 1 2 3
10
3
3 1 2
1
4
3 5 1 2
6

Output:
5
1
-1

Explanation:
Testcase 1: 10 is found at index 5.
*/

#include <bits/stdc++.h>
using namespace std;

int binarySearch(int arr[], int low,  
                  int high, int key) 
{ 
  if (high < low) 
    return -1; 
      
  int mid = (low + high)/2; /*low + (high - low)/2;*/
  if (key == arr[mid]) 
    return mid; 
      
  if (key > arr[mid]) 
    return binarySearch(arr, (mid + 1), high, key); 
      
  // else 
    return binarySearch(arr, low, (mid -1), key); 
} 

int findPivot(int arr[], int low, int high) 
{ 
  if (high < low) return -1; 
  if (high == low) return low; 
   int mid = (low + high)/2;
   if (mid < high && arr[mid] > arr[mid + 1]) 
    return mid; 
   if (mid > low && arr[mid] < arr[mid - 1]) 
    return (mid-1); 
   if (arr[low] >= arr[mid]) 
    return findPivot(arr, low, mid-1); 
   return findPivot(arr, mid + 1, high); 
} 
  
  
int pivotedBinarySearch(int arr[], int n, int key) 
{ 
  int pivot = findPivot(arr, 0, n-1); 
  if (pivot == -1) 
    return binarySearch(arr, 0, n-1, key); 
  if (arr[pivot] == key) 
    return pivot; 
  if (arr[0] <= key) 
    return binarySearch(arr, 0, pivot-1, key); 
    return binarySearch(arr, pivot+1, n-1, key); 
} 

int main() {
	int t; cin>>t; while(t--){
	    int n,k; cin>>n;
	    int a[n]; for(int i=0; i<n; i++) cin>>a[i];
	    cin>>k;
	    cout<<pivotedBinarySearch(a,n,k)<<'\n';
	    
	    
	}
	return 0;
}
