/*
You are given an array arr[] of N integers including 0. The task is to find the smallest positive number missing from the array.
Note: Expected solution in O(n) time using constant extra space.

Input:
First line consists of T test cases. First line of every test case consists of N, denoting the number of elements in array. Second line of
every test case consists of elements in array.

Output:
Single line output, print the smallest positive number missing.

Constraints:
1 <= T <= 100
1 <= N <= 106
-106 <= arr[i] <= 106

Example:
Input:
2
5
1 2 3 4 5
5
0 -10 1 3 -20
Output:
6
2

Explanation:
Testcase 1: Smallest positive missing number is 6.
Testcase 2: Smallest positive missing number is 2.
*/

#include<bits/stdc++.h>
#define f for(int i=0; i<n; i++)
using namespace std;

int segregate(int a[] , int n){
    int j=0;
    for(int i=0; i<n; i++){
        if(a[i]<=0){
            swap(a[i],a[j]);
            j++;
        }
    }
return j;
}

int smallPos(int a[], int n){
   for(int i=0; i<n; i++){
       if(abs(a[i])-1 < n  && a[abs(a[i]) -1]>0){
           a[abs(a[i]) -1] = -a[abs(a[i]) -1];
       }
   }
   for(int i=0; i<n; i++){
       if(a[i]>0) return i+1;
   }
 return n+1;
}

int findMissingPos(int a[],int n){
    int s = segregate(a,n);
    return smallPos(a+s, n-s);
}



int main(){
    int t; cin>>t; while(t--){
        int n; cin>>n;
        int a[n]; f cin>>a[i];
        cout<<findMissingPos(a,n)<<'\n';
    }
}
