/*
Given below is a binary tree. The task is to print the top view of binary tree. Top view of a binary tree is the set of nodes visible
when the tree is viewed from the top. For the given below tree

       1
    /     \
   2       3
  /  \    /   \
4    5  6   7

Top view will be: 4 2 1 3 7
Note: Print from leftmost node to rightmost node.

Input Format:
The first line of the input contains a single integer T denoting the number of test cases. T testcases follow. Each testcase contains 
two lines of input. The first line contains number of edges. The second line contains relation between nodes.

Output Format:
For each test case, in a new line, print top view of the binary tree level wise. The nodes should be separated by space.

Your Task:
Since this is a function problem. You don't have to take input. Just complete the function printTopView() that takes root node as 
parameter and prints the top view. The newline is automatically appended by the driver code.

 Constraints:
1 <= T <= 100
1 <= N <= 100

Example:
Input:
2
2
1 2 L 1 3 R
5
10 20 L 10 30 R 20 40 L 20 60 R 30 90 L

Output:
2 1 3
40 20 10 30

Explanation:
Testcase 1:

           1

        /     \

      2        3

For the above test case the top view is: 2 1 3
Test case 2:

            10

         /        \

     20          30

   /      \       /

40      60 90

TopView is: 40 20 10 30
*/

void topView(struct Node *root)
{
    if(root == NULL) return;
    queue< pair<struct Node*, int> > q;
    int hd=0;
    map<int, int> m;
    q.push(make_pair(root,hd));
    while(!q.empty()){
        struct Node *t = q.front().first;
        hd = q.front().second;
        if(m.find(hd) == m.end()){
            m[hd] = t->data;
        }
        if(t->left != NULL){
            q.push(make_pair(t->left,hd-1));
        }
        if(t->right != NULL){
            q.push(make_pair(t->right,hd+1));
        }
        q.pop();
    }
    for(auto i: m) cout<<i.second<<" ";
}
