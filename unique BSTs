/*
Given an integer N, how many structurally unique binary search trees are there that store values 1...N?

Input:
First line of input contains T denoting the number of testcases. T testcases follow. Each testcase contains a single line of input
containing N.

Ouput:
For each testcase, in a new line, print the answer.

Constraints:
1<=T<=15
1<=N<=11

Example:
Input:
2
2
3
Output:
2
5

Explanation:

Testcase1:
for N = 2, there are 2 unique BSTs
     1               2  
      \            /
       2         1

Testcase2:
for N = 3, there are 5 possible BSTs
  1              3        3         2      1
    \           /        /           /    \      \
     3        2         1        1    3      2
    /       /                \                      \
   2      1               2                        3
   
   
   
   */
   
 #include <iostream>
#define ll long long int
using namespace std;

ll ncr(ll n, ll r){
    if(n==r || r==0) return 1;
    if(r==1) return n;
    return (ncr(n-1,r-1)+ncr(n-1,r));
}


int main() {
	int t; cin>>t; while(t--){
	    ll n; cin>>n;
	    cout<<ncr(2*n, n+1) /n <<'\n';
	}
	return 0;
}
