/*
Given a binary tree of size N, your task is to complete the function zigZagTraversal(), that prints the nodes of binary tree in ZigZag
manner.

For Example:
For the below binary tree the zigzag order 
traversal will be 1 3 2 7 6 5 4.

Binary Tree Example
Input:
The function takes a single argument as input, the reference pointer to the root of the binary tree.
There will be T testcases and for each test case the function will be called separately.
Output:
For each test case print on a new line space separated all the nodes of the tree in ZigZag manner.
Constraints:
1<=T<=500
1<=N<=1000
Example:
Input:
1
10
1 2 L 1 3 R 2 4 L 2 5 R 3 6 L 3 7 R 4 8 L 5 9 R 6 10 L 7 11 R
Output:
1 3 2 4 5 6 7 11 10 9 8
*/

void zigZagTraversal(Node* root)
{
	 int h=0;
	 queue<Node *> q;
	 q.push(root);
	 stack<int> s;
	 while(!q.empty()){
	     int size = q.size();
	     while(size--){
	         Node *t = q.front();
	         q.pop();
	         if(h%2 == 0 && h!=1){
	             cout<<t->data<<" ";
	         }
	         else{
	             s.push(t->data);
	         }
	         if(t->left) q.push(t->left);
	         if(t->right) q.push(t->right);
	     }
	     while(!s.empty()){
	         cout<<s.top()<<" ";
	         s.pop();
	     }
	     h++;
	 }
	 cout<<'\n';
}
